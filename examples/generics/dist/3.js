"use strict";
// Generic function/method
exports.__esModule = true;
// Узагальнені функції або методи в TypeScript є способом створення функцій, що можуть працювати з різними типами даних, зберігаючи водночас типізацію вхідних і вихідних даних.
// Давайте подивимося на приклад простої узагальненої функції:
function identity(arg) {
    return arg;
}
// У цій функції T є узагальненим типом. Це означає, що T є певним типом, який буде вказаний при виклику функції. Функція identity приймає аргумент типу T і повертає значення того ж типу T.
// Ми можемо викликати цю функцію для різних типів:
var output1 = identity("myString");
var output2 = identity(100);
// Також TypeScript може автоматично виводити тип під час використання узагальнених функцій, тому ми можемо опустити явну вказівку типу:
var output1 = identity("myString");
var output2 = identity(100);
// Як приклад, давайте розглянемо функцію, що приймає масив та повертає його перший елемент:
function firstElement(arr) {
    return arr[0];
}
var numbers = [1, 2, 3, 4, 5];
var firstNum = firstElement(numbers);
var strings = ['a', 'b', 'c', 'd'];
var firstStr = firstElement(strings);
// У цьому прикладі функція firstElement може працювати з масивами будь-яких типів і завжди повертає елемент того ж типу, що й елементи масиву.
// Тобто тип T буде замінений на number або string залежно від значень, що передаються.
